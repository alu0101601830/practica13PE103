{"version":3,"file":"/home/usuario/practicas/practica9/ull-esit-inf-dsi-22-23-prct09-funko-app-alu0101601830/src/Mochila.ts","sources":["/home/usuario/practicas/practica9/ull-esit-inf-dsi-22-23-prct09-funko-app-alu0101601830/src/Mochila.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\n\n/**\n * Elementos de la mochila\n * @type\n */\ntype ElementoMochila = {\n  numElemento: number;\n  peso: number;\n  beneficio: number;\n};\n\nabstract class Mochila {\n  protected abstract extraerDatosCSV(data: string): { capacidad: number; elementos: ElementoMochila[] };\n  protected abstract extraerDatosJSON(data: string): { capacidad: number; elementos: ElementoMochila[] };\n\n  public procesar(filePath: string): { beneficios: number[]; pesos: number[] } {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('El archivo no existe en la ruta especificada.');\n    }\n    const data = fs.readFileSync(filePath, 'utf8');\n    const extension = filePath.split('.').pop()?.toLowerCase() || '';\n    let elementos: ElementoMochila[];\n\n    if (extension === 'csv') {\n      const { elementos: elementosExtraidos } = this.extraerDatosCSV(data);\n      elementos = elementosExtraidos;\n    } else if (extension === 'json') {\n      const { elementos: elementosExtraidos } = this.extraerDatosJSON(data);\n      elementos = elementosExtraidos;\n    } else {\n      throw new Error('Formato de archivo no soportado.');\n    }\n\n    const beneficios = elementos.map((elemento) => elemento.beneficio);\n    const pesos = elementos.map((elemento) => elemento.peso);\n\n    return { beneficios, pesos };\n  }\n}\n\nexport class MochilaCSV extends Mochila {\n  protected extraerDatosJSON(data: string): { capacidad: number; elementos: ElementoMochila[]; } {\n      throw new Error('Method not implemented.');\n  }\n  protected extraerDatosCSV(data: string): { capacidad: number; elementos: ElementoMochila[] } {\n    const lines = data.trim().split('\\n');\n    const capacidad = parseInt(lines[0]);\n    const numElemento = parseInt(lines[1]);\n\n    const elementos: ElementoMochila[] = lines.slice(2).map((line, index) => {\n      const [beneficio, peso] = line.split(' ').map(Number);\n      return { numElemento: index + 1, beneficio, peso };\n    });\n\n    return { capacidad, elementos };\n  }\n}\n\nexport class MochilaJSON extends Mochila {\n  protected extraerDatosCSV(data: string): { capacidad: number; elementos: ElementoMochila[]; } {\n      throw new Error('Method not implemented.');\n  }\n  protected extraerDatosJSON(data: string): { capacidad: number; elementos: ElementoMochila[] } {\n    const jsonData = JSON.parse(data);\n    const capacidad = jsonData.capacidad;\n    const elementos: ElementoMochila[] = jsonData.elementos.map((elemento: any) => ({\n      numElemento: elemento.numElemento,\n      peso: elemento.peso,\n      beneficio: elemento.beneficio,\n    }));\n\n    return { capacidad, elementos };\n  }\n}\n\n\nconst extractorCSV = new MochilaCSV();\nconst resultadoCSV = extractorCSV.procesar('src/data/archivo.csv'); \nconsole.log(resultadoCSV);\n\nconst extractorJSON = new MochilaJSON();\nconst resultadoJSON = extractorJSON.procesar('src/data/archivo.json');\nconsole.log(resultadoJSON);\n"]}